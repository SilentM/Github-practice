# One Pass
# Time Complexity: O(n)
# Space Complexity: O(1)
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        maxProfit = 0
        
        for i in range(1, len(prices)):
            if prices[i] > prices[i -1]:
                maxProfit = maxProfit + (prices[i] - prices[i - 1])
        
        return maxProfit

# # DP method
# # Time Complexity: O(n)
# # Space Complexity: O(n)
# class Solution:
#     def maxProfit(self, prices: List[int]) -> int:
#         n = len(prices)
#         dp = [0] * n
#         self.findMaxProfit(prices, dp, 1)
#         return dp[n - 1]
        
        
    
    
#     def findMaxProfit(self, prices, dp, index):
#         if index < len(prices):
#             dp[index] = max(dp[index - 1], prices[index] - prices[index - 1] + dp[index - 1])
#             self.findMaxProfit(prices, dp, index + 1)
        

        
        
        
        









