# Time Complexity: Push, Peek, and Empty: O(1), Pop: Amortized O(1) but worse case is O(n) 
# Space Complexity: O(n)
class MyQueue:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.stack1 = []
        self.stack2 = []
        self.front = None #for peek function, if stack2 is empty

    def push(self, x: int) -> None:
        """
        Push element x to the back of queue.
        """
        self.stack1.append(x)
        if len(self.stack1) == 1:
            self.front = x
       
        

    def pop(self) -> int:
        """
        Removes the element from in front of queue and returns that element.
        """
        # I am assuming this function won't be called if there are no elements
        
        returnValue = None
        
        if len(self.stack2) == 0:
            while len(self.stack1) != 0:
                self.stack2.append(self.stack1.pop())

            returnValue = self.stack2.pop()

            # while len(self.stack2) != 0:
            #     self.stack1.append(self.stack2.pop())
        else: 
            returnValue = self.stack2.pop()
            
        return returnValue
      
            
        
    def peek(self) -> int:
        """
        Get the front element.
        """
        
        returnValue = None
        if len(self.stack2) != 0:
            returnValue = self.stack2.pop()
            self.stack2.append(returnValue)  
            return returnValue
        else: 
            return self.front
    
        

    def empty(self) -> bool:
        """
        Returns whether the queue is empty.
        """
        if len(self.stack1) == 0 and len(self.stack2) == 0:
            return True
        else:
            return False
        


# Your MyQueue object will be instantiated and called as such:
# obj = MyQueue()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.peek()
# param_4 = obj.empty()
